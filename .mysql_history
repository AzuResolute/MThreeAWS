show database
;
show tables;
show databases;
source execute.sql;
show databases;
use employees;
show tables;
DELIMITER $$
#create or replace function plus(a int, b int)
create function plus(a int, b int)
returns int
BEGIN
return a + b;
END $$
create function plus(a int, b int) returns int BEGIN return a + b; END$$
DELIMITER ;
select * from plus(2,3);
select plus(2,3);
DELIMITER $$
create function max(a int, b int)
return int
BEGIN
IF a > b
return a;
ELSE return b;
END $$
create function max(a int, b int) return int BEGIN IF a > b return a; ELSE return b; END$$
DELIMITER ;
DELIMITER $$
create function maximum(a int, b int)
returns int
BEGIN
IF a > b
return a;
ELSE return b;
END $$
create function maximum(a int, b int) returns int BEGIN IF a > b return a; ELSE return b; END$$
DELIMITER ;
DELIMITER $$
create function maximum(a int, b int)
returns int
BEGIN
IF (a > b)
return a;
ELSE
return b;
END $$
create function maximum(a int, b int) returns int BEGIN IF (a > b) return a; ELSE return b; END$$
DELIMITER ;
DELIMITER $$
create function maximum(a int, b int)
returns int
BEGIN
IF (a>b)
return a;
ELSE
return b;
END $$
create function maximum(a int, b int) returns int BEGIN IF (a>b) return a; ELSE return b; END$$
DELIMITER ;
DELIMITER $$
create function maximum(a int, b int)
returns int
BEGIN
IF (a>b)
select a;
ELSE
select b;
END $$
create function maximum(a int, b int) returns int BEGIN IF (a>b) select a; ELSE select b; END$$
DELIMITER ;
DELIMITER $$
create function maximum(a int, b int)
returns int
BEGIN
IF a>b THEN
return a;
ELSE
return b;
END $$
create function maximum(a int, b int) returns int BEGIN IF a>b THEN return a; ELSE return b; END$$
DELIMITER ;
DELIMITER $$
create function maximum(a int, b int)
returns int
BEGIN
IF a > b THEN
return a;
ELSE
return b;
END $$
create function maximum(a int, b int) returns int BEGIN IF a > b THEN return a; ELSE return b; END$$
DELIMITER ;
DELIMITER $$
create function maximum(a int, b int)
returns int
BEGIN
DECLARE selected int
IF a > b THEN
SET selected = a;
ELSE
SET selected = b;
END IF;
RETURN selected;
END $$
create function maximum(a int, b int) returns int BEGIN DECLARE selected int IF a > b THEN SET selected = a; ELSE SET selected = b; END IF; RETURN selected; END$$
DELIMITER ;
DELIMITER $$
create function maximum(a int, b int)
returns int
BEGIN
DECLARE selected int;
IF a > b THEN
SET selected = a;
ELSE
SET selected = b;
END IF;
RETURN selected;
END $$
create function maximum(a int, b int) returns int BEGIN DECLARE selected int; IF a > b THEN SET selected = a; ELSE SET selected = b; END IF; RETURN selected; END$$
DELIMITER ;
select maximum(2,2000);
DELIMITER $$
create function maximum2(a int, b int)
returns int
BEGIN
IF a > b THEN
return a;
ELSE
return b;
END IF;
END $$
create function maximum2(a int, b int) returns int BEGIN IF a > b THEN return a; ELSE return b; END IF; END$$
DELIMITER ;maximum2(4,420);
DELIMITER ;
maximum2(4,420);
select maximum2(4,420);
DELIMITER $$
create function iterateSum(init int)
returns int
BEGIN
DECLARE current int = 1;
DECLARE sum int = 0;
WHILE current >= init DO
SET sum = sum + current;
SET current = current + 1;
END WHILE;
END $$
create function iterateSum(init int) returns int BEGIN DECLARE current int = 1; DECLARE sum int = 0; WHILE current >= init DO SET sum = sum + current; SET current = current + 1; END WHILE; END$$
DELIMITER ;
DELIMITER $$
create function iterateSum(init int)
returns int
BEGIN
DECLARE current int;
SET current = 1;
DECLARE sum;
SET sum = 0;
WHILE current >= init DO
SET sum = sum + current;
SET current = current + 1;
END WHILE;
END $$
create function iterateSum(init int) returns int BEGIN DECLARE current int; SET current = 1; DECLARE sum; SET sum = 0; WHILE current >= init DO SET sum = sum + current; SET current = current + 1; END WHILE; END$$
DELIMITER ;
DELIMITER $$
create function iterateSum(init int)
returns int
BEGIN
DECLARE current int;
SET current = 1;
DECLARE sum int;
SET sum = 0;
WHILE current >= init DO
SET sum = sum + current;
SET current = current + 1;
END WHILE;
END $$
create function iterateSum(init int) returns int BEGIN DECLARE current int; SET current = 1; DECLARE sum int; SET sum = 0; WHILE current >= init DO SET sum = sum + current; SET current = current + 1; END WHILE; END$$
DELIMITER ;
DELIMITER $$
create function iterateSum(init int)
returns int
BEGIN
DECLARE current int;
SET current=1;
DECLARE sum int;
SET sum=0;
WHILE current >= init DO
SET sum = sum + current;
SET current = current + 1;
END WHILE;
END $$
create function iterateSum(init int) returns int BEGIN DECLARE current int; SET current=1; DECLARE sum int; SET sum=0; WHILE current >= init DO SET sum = sum + current; SET current = current + 1; END WHILE; END$$
DELIMITER ;
DELIMITER $$
create function iterateSum(init int)
returns int
BEGIN
DECLARE current int;
SET current=1;
DECLARE sum int;
SET sum = 0;
WHILE current >= init DO
SET sum = sum + current;
SET current = current + 1;
END WHILE;
END $$
create function iterateSum(init int) returns int BEGIN DECLARE current int; SET current=1; DECLARE sum int; SET sum = 0; WHILE current >= init DO SET sum = sum + current; SET current = current + 1; END WHILE; END$$
DELIMITER ;
DELIMITER $$
create function iterateSum(init int)
returns int
BEGIN
DECLARE current int;
SET current = 1;
DECLARE sum int;
SET sum = 0;
WHILE current >= init DO
SET sum = sum + current;
SET current = current + 1;
END WHILE;
END $$
create function iterateSum(init int) returns int BEGIN DECLARE current int; SET current = 1; DECLARE sum int; SET sum = 0; WHILE current >= init DO SET sum = sum + current; SET current = current + 1; END WHILE; END$$
DELIMITER ;
DELIMITER $$
create function iterateSum(init int)
returns int
BEGIN
DECLARE current int ;
SET current = 1;
DECLARE sum int ;
SET sum = 0;
WHILE current >= init DO
SET sum = sum + current;
SET current = current + 1;
END WHILE;
END $$
create function iterateSum(init int) returns int BEGIN DECLARE current int ; SET current = 1; DECLARE sum int ; SET sum = 0; WHILE current >= init DO SET sum = sum + current; SET current = current + 1; END WHILE; END$$
DELIMITER ;
DELIMITER $$
create function iterateSum(init int)
returns int
BEGIN
DECLARE current int ;
SET current = 1 ;
DECLARE sum int ;
SET sum = 0 ;
WHILE current >= init DO
SET sum = sum + current ;
SET current = current + 1 ;
END WHILE ;
END $$
create function iterateSum(init int) returns int BEGIN DECLARE current int ; SET current = 1 ; DECLARE sum int ; SET sum = 0 ; WHILE current >= init DO SET sum = sum + current ; SET current = current + 1 ; END WHILE ; END$$
DELIMITER ;
DELIMITER $$
create function iterateSum(init int)
returns int
BEGIN
DECLARE current INTEGER ;
SET current = 1 ;
DECLARE sum INTEGER ;
SET sum = 0 ;
WHILE current >= init DO
SET sum = sum + current ;
SET current = current + 1 ;
END WHILE ;
END $$
create function iterateSum(init int) returns int BEGIN DECLARE current INTEGER ; SET current = 1 ; DECLARE sum INTEGER ; SET sum = 0 ; WHILE current >= init DO SET sum = sum + current ; SET current = current + 1 ; END WHILE ; END$$
DELIMITER ;
DELIMITER $$
create function iterateSum(init int)
returns int
BEGIN
DECLARE current int;
SET current = 1;
DECLARE sum int;
SET sum = 0;
WHILE current >= init DO
SET sum = sum + current;
SET current = current + 1;
END WHILE;
END $$
create function iterateSum(init int) returns int BEGIN DECLARE current int; SET current = 1; DECLARE sum int; SET sum = 0; WHILE current >= init DO SET sum = sum + current; SET current = current + 1; END WHILE; END$$
DELIMITER ;
DELIMITER $$
create function iterateSum(init int)
returns int
BEGIN
DECLARE current int;
SET current = 1;
DECLARE summ int;
SET summ = 0;
WHILE current >= init DO
SET summ = summ + current;
SET current = current + 1;
END WHILE;
END $$
create function iterateSum(init int) returns int BEGIN DECLARE current int; SET current = 1; DECLARE summ int; SET summ = 0; WHILE current >= init DO SET summ = summ + current; SET current = current + 1; END WHILE; END$$
DELIMITER $$
create function iterateSum(init int)
returns int
BEGIN
DECLARE current int;
SET current = 1;
DECLARE summ int DEFAULT 0;
WHILE current <= init DO
SET summ = summ + current;
SET current = current + 1;
END WHILE;
END $$
create function iterateSum(init int) returns int BEGIN DECLARE current int; SET current = 1; DECLARE summ int DEFAULT 0; WHILE current <= init DO SET summ = summ + current; SET current = current + 1; END WHILE; END$$
DELIMITER $$
create function iterateSum(init int)
returns int
BEGIN
DECLARE current int DEFAULT 1;
DECLARE summ int DEFAULT 0;
END $$
create function iterateSum(init int) returns int BEGIN DECLARE current int DEFAULT 1; DECLARE summ int DEFAULT 0; END$$
DELIMITER ;
DELIMITER $$
create function iterateSum(init int)
returns int
BEGIN
DECLARE current int DEFAULT 1;
DECLARE summ int DEFAULT 0;
WHILE current <= init DO
SET summ = summ + current;
SET current = current + 1;
END WHILE;
RETURN summ;
END $$
create function iterateSum(init int) returns int BEGIN DECLARE current int DEFAULT 1; DECLARE summ int DEFAULT 0; WHILE current <= init DO SET summ = summ + current; SET current = current + 1; END WHILE; RETURN summ; END$$
DELIMITER ;
select iterateSum(5);
select iterateSum(10);
DELIMITER $$
create function iterateSum2(init int)
returns int
BEGIN
DECLARE current int DEFAULT 1;
DECLARE sum int DEFAULT 0;
WHILE current <= init DO
SET sum = sum + current;
SET current = current + 1;
END WHILE;
RETURN sum;
END $$
create function iterateSum2(init int) returns int BEGIN DECLARE current int DEFAULT 1; DECLARE sum int DEFAULT 0; WHILE current <= init DO SET sum = sum + current; SET current = current + 1; END WHILE; RETURN sum; END$$
DELIMITER ;
select iterateSum2(7);
DELIMITER $$
create function factorize(init int)
returns int
BEGIN
DECLARE current int DEFAULT 1;
DECLARE prod int DEFAULT 0;
WHILE current <= init DO
SET prod = prod * current;
SET current = current + 1;
END WHILE;
RETURN prod;
END $$
create function factorize(init int) returns int BEGIN DECLARE current int DEFAULT 1; DECLARE prod int DEFAULT 0; WHILE current <= init DO SET prod = prod * current; SET current = current + 1; END WHILE; RETURN prod; END$$
DELIMITER ;
select factorize(3);
drop function factorize;
DELIMITER $$
create function factorize(init int)
returns int
BEGIN
DECLARE current int DEFAULT 1;
DECLARE prod int DEFAULT 1;
WHILE current <= init DO
SET prod = prod * current;
SET current = current + 1;
END WHILE;
RETURN prod;
END $$
create function factorize(init int) returns int BEGIN DECLARE current int DEFAULT 1; DECLARE prod int DEFAULT 1; WHILE current <= init DO SET prod = prod * current; SET current = current + 1; END WHILE; RETURN prod; END$$
DELIMITER ;
select factorize(3);
factorize(5);
select factorize(5);
create TABLE customer(
id  int,
name varchar(40) NOT NULL,
email varchar(40) NOT NULL,
city varchar(40) NOT NULL,
country varchar(20) NOT NULL,
PRIMARY KEY (id)
);
create TABLE customer( id  int, name varchar(40) NOT NULL, email varchar(40) NOT NULL, city varchar(40) NOT NULL, country varchar(20) NOT NULL, PRIMARY KEY (id) );
DELIMITER $$
create PROCEDURE insertNewCustomer(newId INTEGER, newName VARCHAR(50), newEmail VARCHAR(50), newCity VARCHAR(30), newCountry VARCHAR(20))
BEGIN
INSERT INTO customer (id, name, email, city, country)
VALUES (newId, newName, newEmail, newCity, newCountry);
END $$
create PROCEDURE insertNewCustomer(newId INTEGER, newName VARCHAR(50), newEmail VARCHAR(50), newCity VARCHAR(30), newCountry VARCHAR(20)) BEGIN INSERT INTO customer (id, name, email, city, country) VALUES (newId, newName, newEmail, newCity, newCountry); END$$
DELIMITER ;
call insertNewCustomer(1, "Jan Czarina Javier", "czan@gmail.com", "NYC", "USA");
select * from customer;
create TABLE audit_customer(
id  int,
name varchar(40) NOT NULL,
email varchar(40) NOT NULL,
city varchar(40) NOT NULL,
country varchar(20) NOT NULL,
date_of_deletion timestamp,
PRIMARY KEY (id)
;
create TABLE audit_customer( id  int, name varchar(40) NOT NULL, email varchar(40) NOT NULL, city varchar(40) NOT NULL, country varchar(20) NOT NULL, date_of_deletion timestamp, PRIMARY KEY (id) PRIMARY KEY (id);
create TABLE audit_customer(
id  int,
name varchar(40) NOT NULL,
email varchar(40) NOT NULL,
city varchar(40) NOT NULL,
country varchar(20) NOT NULL,
date_of_deletion timestamp,
PRIMARY KEY (id)
);
create TABLE audit_customer( id  int, name varchar(40) NOT NULL, email varchar(40) NOT NULL, city varchar(40) NOT NULL, country varchar(20) NOT NULL, date_of_deletion timestamp, PRIMARY KEY (id) );
shot tables;
show tables;
select * from customer;
select * from audit_customer;
desc from audit_customer;
desc audit_customer;
CREATE TRIGGER cust_onDelete_toAudit
AFTER DELETE
ON customer FOR EACH ROW
BEGIN
SELECT 
INSERT INTO audit_customer
VALUES (OLD.id, OLD.name, OLD.email, OLD.city, OLD.country, CURRENT_TIMESTAMP(2))
END;
CREATE TRIGGER cust_onDelete_toAudit AFTER DELETE ON customer FOR EACH ROW BEGIN SELECT  INSERT INTO audit_customer VALUES (OLD.id, OLD.name, OLD.email, OLD.city, OLD.country, CURRENT_TIMESTAMP(2)) END;
CREATE TRIGGER cust_onDelete_toAudit
AFTER DELETE
ON customer FOR EACH ROW
BEGIN
SELECT 
INSERT INTO audit_customer
VALUES (OLD.id, OLD.name, OLD.email, OLD.city, OLD.country, CURRENT_TIMESTAMP(2));
CREATE TRIGGER cust_onDelete_toAudit AFTER DELETE ON customer FOR EACH ROW BEGIN SELECT  INSERT INTO audit_customer VALUES (OLD.id, OLD.name, OLD.email, OLD.city, OLD.country, CURRENT_TIMESTAMP(2));
END;
DELIMITER $$
CREATE TRIGGER cust_onDelete_toAudit
AFTER DELETE
ON customer FOR EACH ROW
BEGIN
SELECT 
INSERT INTO audit_customer
VALUES (OLD.id, OLD.name, OLD.email, OLD.city, OLD.country, NOW());
END; $$
CREATE TRIGGER cust_onDelete_toAudit AFTER DELETE ON customer FOR EACH ROW BEGIN SELECT  INSERT INTO audit_customer VALUES (OLD.id, OLD.name, OLD.email, OLD.city, OLD.country, NOW()); END;$$
DELIMITER ;
DELIMITER $$
CREATE TRIGGER cust_onDelete_toAudit
AFTER DELETE
ON customer FOR EACH ROW
BEGIN 
INSERT INTO audit_customer
VALUES (OLD.id, OLD.name, OLD.email, OLD.city, OLD.country, NOW());
END; $$
CREATE TRIGGER cust_onDelete_toAudit AFTER DELETE ON customer FOR EACH ROW BEGIN  INSERT INTO audit_customer VALUES (OLD.id, OLD.name, OLD.email, OLD.city, OLD.country, NOW()); END;$$
DELIMITER ;
show triggers;
show procedures;l
show procedures;
l show procedures;
show procedures;
show stored_procedures;
insertNewCustomer(2, "Danielle Fernando", "denden220@gmail.com", "Orlando", "USA");
call insertNewCustomer(2, "Danielle Fernando", "denden220@gmail.com", "Orlando", "USA");
use employees
select * from customer;
DELETE FROM customer where id=2;
select * from audit_customer;
select * from customer;
show databases;
use mysql;
showt ables;
showt tables;
show tables;
select * from user;
CREATE USER 'secretary' IDENTIFIED BY 'secretary_password';
GRANT USAGE ON *.* TO secretary@localhost IDENTIFIED BY 'secretary_password';
GRANT USAGE ON *.* TO secretary@'%' IDENTIFIED BY 'secretary_password';
FLUSH PRIVILEGES;
SHOW GRANTS FOR secretary;
use mysql;
show tables;
show grants for 'secretary%';
show grants for secretary%;
show grants for secretary@;
show grants for secretary2@localhost;
use employees;
select * from employees;
use employees;
select * from employees;
use employees;
delete from employees where emp_no=10015;
select * from employees;
use employees
select * from employees;
use employees
DELIMITER $$
create PROCEDURE newEmp(
_first_name VARCHAR(14),
_last_name VARCHAR(16),
_birth_date DATE,
_gender enum('M', 'F'),
_dept_no CHAR(4),
_salary INTEGER(11)
)
BEGIN
select @newEmp := max(emp_no)+1 from employees;
INSERT INTO employees
(emp_no, birth_date, first_name, last_name, gender, hire_date)
VALUES (
@newEmp,
_birth_date,
_first_name,
_last_name,
_gender,
CURDATE());
INSERT INTO dept_emp
(emp_no, dept_no, from_date, to_date)
VALUES (@newEmp,
_dept_no,
CURDATE(),
"9999-01-01");
INSERT INTO salaries
(emp_no, salary, from_date, to_date)
VALUES (@newEmp,
_salary,
CURDATE(),
"9999-01-01");
END $$
create PROCEDURE newEmp( _first_name VARCHAR(14), _last_name VARCHAR(16), _birth_date DATE, _gender enum('M', 'F'), _dept_no CHAR(4), _salary INTEGER(11) ) BEGIN select @newEmp := max(emp_no)+1 from employees; INSERT INTO employees (emp_no, birth_date, first_name, last_name, gender, hire_date) VALUES ( @newEmp, _birth_date, _first_name, _last_name, _gender, CURDATE()); INSERT INTO dept_emp (emp_no, dept_no, from_date, to_date) VALUES (@newEmp, _dept_no, CURDATE(), "9999-01-01"); INSERT INTO salaries (emp_no, salary, from_date, to_date) VALUES (@newEmp, _salary, CURDATE(), "9999-01-01"); END$$
DELIMITER ;
use employees
DELIMITER $$
create PROCEDURE updateEmpPersonalInfo(
_emp_no,
_first_name VARCHAR(14),
_last_name VARCHAR(16),
_birth_date DATE,
_gender enum('M', 'F'),
)
BEGIN
UPDATE employees
SET first_name=_first_name,
last_name = _last_name,
birth_date = _birth_date,
gender = _gender,
WHERE emp_no=_emp_no;
END $$
create PROCEDURE updateEmpPersonalInfo( _emp_no, _first_name VARCHAR(14), _last_name VARCHAR(16), _birth_date DATE, _gender enum('M', 'F'), ) BEGIN UPDATE employees SET first_name=_first_name, last_name = _last_name, birth_date = _birth_date, gender = _gender, WHERE emp_no=_emp_no; END$$
DELIMITER ;
DELIMITER $$
create PROCEDURE updateEmpPersonalInfo(
_emp_no,
_first_name VARCHAR(14),
_last_name VARCHAR(16),
_birth_date DATE,
_gender enum('M', 'F')
)
BEGIN
UPDATE employees
SET first_name=_first_name,
last_name = _last_name,
birth_date = _birth_date,
gender = _gender,
WHERE emp_no=_emp_no;
END $$
create PROCEDURE updateEmpPersonalInfo( _emp_no, _first_name VARCHAR(14), _last_name VARCHAR(16), _birth_date DATE, _gender enum('M', 'F') ) BEGIN UPDATE employees SET first_name=_first_name, last_name = _last_name, birth_date = _birth_date, gender = _gender, WHERE emp_no=_emp_no; END$$
DELIMITER ;
DELIMITER $$
create PROCEDURE updateEmpPersonalInfo(
_emp_no INTEGER(11),
_first_name VARCHAR(14),
_last_name VARCHAR(16),
_birth_date DATE,
_gender enum('M', 'F')
)
BEGIN
UPDATE employees
SET first_name=_first_name,
last_name = _last_name,
birth_date = _birth_date,
gender = _gender,
WHERE emp_no=_emp_no;
END $$
create PROCEDURE updateEmpPersonalInfo( _emp_no INTEGER(11), _first_name VARCHAR(14), _last_name VARCHAR(16), _birth_date DATE, _gender enum('M', 'F') ) BEGIN UPDATE employees SET first_name=_first_name, last_name = _last_name, birth_date = _birth_date, gender = _gender, WHERE emp_no=_emp_no; END$$
DELIMITER ;
DELIMITER $$
create PROCEDURE updateEmpPersonalInfo(
_emp_no INTEGER(11),
_first_name VARCHAR(14),
_last_name VARCHAR(16),
_birth_date DATE,
_gender enum('M', 'F')
)
BEGIN
UPDATE employees
SET first_name=_first_name,
last_name = _last_name,
birth_date = _birth_date,
gender = _gender,
WHERE emp_no = _emp_no;
END $$
create PROCEDURE updateEmpPersonalInfo( _emp_no INTEGER(11), _first_name VARCHAR(14), _last_name VARCHAR(16), _birth_date DATE, _gender enum('M', 'F') ) BEGIN UPDATE employees SET first_name=_first_name, last_name = _last_name, birth_date = _birth_date, gender = _gender, WHERE emp_no = _emp_no; END$$
DELIMITER ;
DELIMITER $$
create PROCEDURE updateEmpPersonalInfo(
_emp_no INTEGER(11),
_first_name VARCHAR(14),
_last_name VARCHAR(16),
_birth_date DATE,
_gender enum('M', 'F')
)
BEGIN
UPDATE employees
SET first_name=_first_name,
last_name = _last_name,
birth_date = _birth_date,
gender = _gender
WHERE emp_no = _emp_no;
END $$
create PROCEDURE updateEmpPersonalInfo( _emp_no INTEGER(11), _first_name VARCHAR(14), _last_name VARCHAR(16), _birth_date DATE, _gender enum('M', 'F') ) BEGIN UPDATE employees SET first_name=_first_name, last_name = _last_name, birth_date = _birth_date, gender = _gender WHERE emp_no = _emp_no; END$$
DELIMITER ;
call updateEmpPersonalInfo(10015,"Roger","Palabasan","1991-11-24","M");
select * from employees;
use employees
select * from employees;
use employees
show tables;
use employees;
show tables;
show database
;
show databases;
use employees
show tables
;
select * from employees REGEXP ;
select * from where gender=M;
select * from where gender="M";
select * from employees where gender="M";
select * from salaries;
select * from titles;
select * from employees e join salaries s ON e.emp_no=s.emp_no;
select e.emp_no, e.first_name, e.last_name, s.salary from employees e join salaries s ON e.emp_no=s.emp_no;
select * from employees WHERE first_name LIKE "%rgi";
select * from employees WHERE first_name REGEXP '^[A-K]';
select * from employees WHERE last_name REGEXP '^[A-K]';
select * from employees WHERE last_name REGEXP '^......$';
